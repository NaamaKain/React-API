{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\n/**\n * Allows child elements to be transitioned in and out.\n *\n * Demos:\n *\n * - [Transitions](https://mui.com/base-ui/react-transitions/#hooks)\n *\n * API:\n *\n * - [useTransitionTrigger API](https://mui.com/base-ui/react-transitions/hooks-api/#use-transition-trigger)\n */\n\nexport function useTransitionTrigger(requestEnter) {\n  const [state, dispatch] = React.useReducer(transitionStateReducer, {\n    elementExited: !requestEnter,\n    inProgress: false\n  });\n  const hasTransition = React.useRef(false);\n  const handleEntering = React.useCallback(() => {\n    dispatch('entering');\n  }, []);\n  const handleEntered = React.useCallback(() => {\n    dispatch('entered');\n  }, []);\n  const handleExiting = React.useCallback(() => {\n    dispatch('exiting');\n  }, []);\n  const handleExited = React.useCallback(() => {\n    dispatch('exited');\n  }, []);\n  React.useEffect(() => {\n    if (!hasTransition.current) {\n      if (requestEnter) {\n        dispatch('entered');\n      } else {\n        dispatch('exited');\n      }\n    }\n  }, [requestEnter]);\n  const registerTransition = React.useCallback(() => {\n    hasTransition.current = true;\n    return () => {\n      hasTransition.current = false;\n    };\n  }, []);\n  const contextValue = React.useMemo(() => ({\n    requestedEnter: requestEnter,\n    onEntering: handleEntering,\n    onEntered: handleEntered,\n    onExiting: handleExiting,\n    onExited: handleExited,\n    registerTransition,\n    hasExited: state.elementExited\n  }), [handleEntering, handleEntered, handleExiting, handleExited, requestEnter, registerTransition, state.elementExited]);\n  return {\n    contextValue,\n    hasExited: state.elementExited,\n    transitionInProgress: state.inProgress\n  };\n}\n\nfunction transitionStateReducer(_, action) {\n  switch (action) {\n    case 'entering':\n      return {\n        elementExited: false,\n        inProgress: true\n      };\n\n    case 'entered':\n      return {\n        elementExited: false,\n        inProgress: false\n      };\n\n    case 'exiting':\n      return {\n        elementExited: false,\n        inProgress: true\n      };\n\n    case 'exited':\n      return {\n        elementExited: true,\n        inProgress: false\n      };\n\n    default:\n      throw new Error(`Unhandled action: ${action}`);\n  }\n}","map":{"version":3,"sources":["C:/Users/1/Desktop/ShefingReactExe/node_modules/@mui/base/useTransition/useTransitionTrigger.js"],"names":["React","useTransitionTrigger","requestEnter","state","dispatch","useReducer","transitionStateReducer","elementExited","inProgress","hasTransition","useRef","handleEntering","useCallback","handleEntered","handleExiting","handleExited","useEffect","current","registerTransition","contextValue","useMemo","requestedEnter","onEntering","onEntered","onExiting","onExited","hasExited","transitionInProgress","_","action","Error"],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\n/**\n * Allows child elements to be transitioned in and out.\n *\n * Demos:\n *\n * - [Transitions](https://mui.com/base-ui/react-transitions/#hooks)\n *\n * API:\n *\n * - [useTransitionTrigger API](https://mui.com/base-ui/react-transitions/hooks-api/#use-transition-trigger)\n */\nexport function useTransitionTrigger(requestEnter) {\n  const [state, dispatch] = React.useReducer(transitionStateReducer, {\n    elementExited: !requestEnter,\n    inProgress: false\n  });\n  const hasTransition = React.useRef(false);\n  const handleEntering = React.useCallback(() => {\n    dispatch('entering');\n  }, []);\n  const handleEntered = React.useCallback(() => {\n    dispatch('entered');\n  }, []);\n  const handleExiting = React.useCallback(() => {\n    dispatch('exiting');\n  }, []);\n  const handleExited = React.useCallback(() => {\n    dispatch('exited');\n  }, []);\n  React.useEffect(() => {\n    if (!hasTransition.current) {\n      if (requestEnter) {\n        dispatch('entered');\n      } else {\n        dispatch('exited');\n      }\n    }\n  }, [requestEnter]);\n  const registerTransition = React.useCallback(() => {\n    hasTransition.current = true;\n    return () => {\n      hasTransition.current = false;\n    };\n  }, []);\n  const contextValue = React.useMemo(() => ({\n    requestedEnter: requestEnter,\n    onEntering: handleEntering,\n    onEntered: handleEntered,\n    onExiting: handleExiting,\n    onExited: handleExited,\n    registerTransition,\n    hasExited: state.elementExited\n  }), [handleEntering, handleEntered, handleExiting, handleExited, requestEnter, registerTransition, state.elementExited]);\n  return {\n    contextValue,\n    hasExited: state.elementExited,\n    transitionInProgress: state.inProgress\n  };\n}\nfunction transitionStateReducer(_, action) {\n  switch (action) {\n    case 'entering':\n      return {\n        elementExited: false,\n        inProgress: true\n      };\n    case 'entered':\n      return {\n        elementExited: false,\n        inProgress: false\n      };\n    case 'exiting':\n      return {\n        elementExited: false,\n        inProgress: true\n      };\n    case 'exited':\n      return {\n        elementExited: true,\n        inProgress: false\n      };\n    default:\n      throw new Error(`Unhandled action: ${action}`);\n  }\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { extractEventInfo } from '../../events/event-info.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { isPrimaryPointer } from '../../events/utils/is-primary-pointer.mjs';\nimport { frame, cancelFrame, frameData } from '../../frameloop/frame.mjs';\n/**\n * @internal\n */\n\nclass PanSession {\n  constructor(event, handlers) {\n    let {\n      transformPagePoint,\n      contextWindow\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    /**\n     * @internal\n     */\n    this.startEvent = null;\n    /**\n     * @internal\n     */\n\n    this.lastMoveEvent = null;\n    /**\n     * @internal\n     */\n\n    this.lastMoveEventInfo = null;\n    /**\n     * @internal\n     */\n\n    this.handlers = {};\n    /**\n     * @internal\n     */\n\n    this.contextWindow = window;\n\n    this.updatePoint = () => {\n      if (!(this.lastMoveEvent && this.lastMoveEventInfo)) return;\n      const info = getPanInfo(this.lastMoveEventInfo, this.history);\n      const isPanStarted = this.startEvent !== null; // Only start panning if the offset is larger than 3 pixels. If we make it\n      // any larger than this we'll want to reset the pointer history\n      // on the first update to avoid visual snapping to the cursoe.\n\n      const isDistancePastThreshold = distance2D(info.offset, {\n        x: 0,\n        y: 0\n      }) >= 3;\n      if (!isPanStarted && !isDistancePastThreshold) return;\n      const {\n        point\n      } = info;\n      const {\n        timestamp\n      } = frameData;\n      this.history.push({ ...point,\n        timestamp\n      });\n      const {\n        onStart,\n        onMove\n      } = this.handlers;\n\n      if (!isPanStarted) {\n        onStart && onStart(this.lastMoveEvent, info);\n        this.startEvent = this.lastMoveEvent;\n      }\n\n      onMove && onMove(this.lastMoveEvent, info);\n    };\n\n    this.handlePointerMove = (event, info) => {\n      this.lastMoveEvent = event;\n      this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint); // Throttle mouse move event to once per frame\n\n      frame.update(this.updatePoint, true);\n    };\n\n    this.handlePointerUp = (event, info) => {\n      this.end();\n      if (!(this.lastMoveEvent && this.lastMoveEventInfo)) return;\n      const {\n        onEnd,\n        onSessionEnd\n      } = this.handlers;\n      const panInfo = getPanInfo(event.type === \"pointercancel\" ? this.lastMoveEventInfo : transformPoint(info, this.transformPagePoint), this.history);\n\n      if (this.startEvent && onEnd) {\n        onEnd(event, panInfo);\n      }\n\n      onSessionEnd && onSessionEnd(event, panInfo);\n    }; // If we have more than one touch, don't start detecting this gesture\n\n\n    if (!isPrimaryPointer(event)) return;\n    this.handlers = handlers;\n    this.transformPagePoint = transformPagePoint;\n    this.contextWindow = contextWindow || window;\n    const info = extractEventInfo(event);\n    const initialInfo = transformPoint(info, this.transformPagePoint);\n    const {\n      point\n    } = initialInfo;\n    const {\n      timestamp\n    } = frameData;\n    this.history = [{ ...point,\n      timestamp\n    }];\n    const {\n      onSessionStart\n    } = handlers;\n    onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));\n    this.removeListeners = pipe(addPointerEvent(this.contextWindow, \"pointermove\", this.handlePointerMove), addPointerEvent(this.contextWindow, \"pointerup\", this.handlePointerUp), addPointerEvent(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n  }\n\n  updateHandlers(handlers) {\n    this.handlers = handlers;\n  }\n\n  end() {\n    this.removeListeners && this.removeListeners();\n    cancelFrame(this.updatePoint);\n  }\n\n}\n\nfunction transformPoint(info, transformPagePoint) {\n  return transformPagePoint ? {\n    point: transformPagePoint(info.point)\n  } : info;\n}\n\nfunction subtractPoint(a, b) {\n  return {\n    x: a.x - b.x,\n    y: a.y - b.y\n  };\n}\n\nfunction getPanInfo(_ref, history) {\n  let {\n    point\n  } = _ref;\n  return {\n    point,\n    delta: subtractPoint(point, lastDevicePoint(history)),\n    offset: subtractPoint(point, startDevicePoint(history)),\n    velocity: getVelocity(history, 0.1)\n  };\n}\n\nfunction startDevicePoint(history) {\n  return history[0];\n}\n\nfunction lastDevicePoint(history) {\n  return history[history.length - 1];\n}\n\nfunction getVelocity(history, timeDelta) {\n  if (history.length < 2) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n\n  let i = history.length - 1;\n  let timestampedPoint = null;\n  const lastPoint = lastDevicePoint(history);\n\n  while (i >= 0) {\n    timestampedPoint = history[i];\n\n    if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta)) {\n      break;\n    }\n\n    i--;\n  }\n\n  if (!timestampedPoint) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n\n  const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n\n  if (time === 0) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n\n  const currentVelocity = {\n    x: (lastPoint.x - timestampedPoint.x) / time,\n    y: (lastPoint.y - timestampedPoint.y) / time\n  };\n\n  if (currentVelocity.x === Infinity) {\n    currentVelocity.x = 0;\n  }\n\n  if (currentVelocity.y === Infinity) {\n    currentVelocity.y = 0;\n  }\n\n  return currentVelocity;\n}\n\nexport { PanSession };","map":{"version":3,"sources":["C:/Users/1/Desktop/new react/node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs"],"names":["extractEventInfo","secondsToMilliseconds","millisecondsToSeconds","addPointerEvent","pipe","distance2D","isPrimaryPointer","frame","cancelFrame","frameData","PanSession","constructor","event","handlers","transformPagePoint","contextWindow","startEvent","lastMoveEvent","lastMoveEventInfo","window","updatePoint","info","getPanInfo","history","isPanStarted","isDistancePastThreshold","offset","x","y","point","timestamp","push","onStart","onMove","handlePointerMove","transformPoint","update","handlePointerUp","end","onEnd","onSessionEnd","panInfo","type","initialInfo","onSessionStart","removeListeners","updateHandlers","subtractPoint","a","b","delta","lastDevicePoint","startDevicePoint","velocity","getVelocity","length","timeDelta","i","timestampedPoint","lastPoint","time","currentVelocity","Infinity"],"mappings":"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","sourcesContent":["import { extractEventInfo } from '../../events/event-info.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { isPrimaryPointer } from '../../events/utils/is-primary-pointer.mjs';\nimport { frame, cancelFrame, frameData } from '../../frameloop/frame.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint, contextWindow } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        /**\n         * @internal\n         */\n        this.contextWindow = window;\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const { onEnd, onSessionEnd } = this.handlers;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        this.contextWindow = contextWindow || window;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(this.contextWindow, \"pointermove\", this.handlePointerMove), addPointerEvent(this.contextWindow, \"pointerup\", this.handlePointerUp), addPointerEvent(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n"]},"metadata":{},"sourceType":"module"}
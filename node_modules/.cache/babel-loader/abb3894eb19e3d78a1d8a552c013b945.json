{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1\\\\Desktop\\\\new react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Main from './components/Main';\nimport Posts from './components/Posts';\nimport { Routes, Route, Router, HashRouter, useParams } from 'react-router-dom';\nimport AddPost from './components/AddPost';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  let [posts, setPosts] = useState([]);\n  const {\n    userID\n  } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const getFetchPosts = async IDuser => {\n    setIsLoading(true); // Set loading state to true\n\n    try {\n      let url = `https://jsonplaceholder.typicode.com/posts?userId=${IDuser}`;\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error ${response.status}`);\n      }\n\n      const posts = await response.json();\n      setPosts(posts);\n      return posts;\n    } catch (error) {\n      console.error('ERROR:', error); // Log error to console\n      // Optionally, display an error message to the user here\n    } finally {\n      setIsLoading(false); // Set loading state to false, even if there's an error\n    }\n  };\n\n  function handlePostUpdate(newPost) {\n    // This function now accepts a new post as an argument\n    setPosts([...posts, newPost]); // Append new post to array\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"post- thats ours...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 34\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/:userName/:userID/Posts\",\n          element: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Posts, {\n              getFetchPosts: getFetchPosts,\n              postArr: posts\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(AddPost, {\n              handlePostUpdate: handlePostUpdate,\n              isLoading: isLoading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"uz3c/SX+modlLfy1MLECkssmB50=\", false, function () {\n  return [useParams];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/1/Desktop/new react/src/App.js"],"names":["React","useState","useEffect","Main","Posts","Routes","Route","Router","HashRouter","useParams","AddPost","App","posts","setPosts","userID","isLoading","setIsLoading","getFetchPosts","IDuser","url","response","fetch","ok","Error","status","json","error","console","handlePostUpdate","newPost"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,MAAxB,EAAgCC,UAAhC,EAA4CC,SAA5C,QAA6D,kBAA7D;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAO,aAAP;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACX,MAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAaL,SAAS,EAA5B;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMgB,aAAa,GAAG,MAAOC,MAAP,IAAkB;AACtCF,IAAAA,YAAY,CAAC,IAAD,CAAZ,CADsC,CAClB;;AAEpB,QAAI;AACF,UAAIG,GAAG,GAAI,qDAAoDD,MAAO,EAAtE;AACA,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;;AAEA,UAAI,CAACC,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAW,cAAaH,QAAQ,CAACI,MAAO,EAAxC,CAAN;AACD;;AAED,YAAMZ,KAAK,GAAG,MAAMQ,QAAQ,CAACK,IAAT,EAApB;AACAZ,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACA,aAAOA,KAAP;AACD,KAXD,CAWE,OAAOc,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,QAAd,EAAwBA,KAAxB,EADc,CACkB;AAChC;AACD,KAdD,SAcU;AACRV,MAAAA,YAAY,CAAC,KAAD,CAAZ,CADQ,CACa;AACtB;AACF,GApBD;;AAsBF,WAASY,gBAAT,CAA2BC,OAA3B,EAAoC;AAChC;AACAhB,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWiB,OAAX,CAAD,CAAR,CAFgC,CAED;AAClC;;AAAA;AAID,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADI;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACA,QAAC,MAAD;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,GAAZ;AAAgB,UAAA,OAAO,eAAE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AACE,UAAA,IAAI,EAAC,0BADP;AAEE,UAAA,OAAO,eACL;AAAA,oCACE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,KAAD;AAAO,cAAA,aAAa,EAAEZ,aAAtB;AAAqC,cAAA,OAAO,EAAEL;AAA9C;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE,QAAC,OAAD;AAAS,cAAA,gBAAgB,EAAEgB,gBAA3B;AAA6C,cAAA,SAAS,EAAEb;AAAxD;AAAA;AAAA;AAAA;AAAA,oBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;GAxDQJ,G;UAEcF,S;;;KAFdE,G;AA0DT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Main from './components/Main';\r\nimport Posts from './components/Posts';\r\nimport { Routes, Route, Router, HashRouter, useParams } from 'react-router-dom';\r\nimport AddPost from './components/AddPost';\r\nimport './style.css'\r\n\r\n\r\nfunction App() {\r\n    let [posts, setPosts] = useState([]);\r\n    const { userID } = useParams();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    \r\n    const getFetchPosts = async (IDuser) => {\r\n      setIsLoading(true); // Set loading state to true\r\n    \r\n      try {\r\n        let url = `https://jsonplaceholder.typicode.com/posts?userId=${IDuser}`;\r\n        const response = await fetch(url);\r\n    \r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error ${response.status}`);\r\n        }\r\n    \r\n        const posts = await response.json();\r\n        setPosts(posts);\r\n        return posts;\r\n      } catch (error) {\r\n        console.error('ERROR:', error); // Log error to console\r\n        // Optionally, display an error message to the user here\r\n      } finally {\r\n        setIsLoading(false); // Set loading state to false, even if there's an error\r\n      }\r\n    };\r\n\r\n  function handlePostUpdate (newPost) {\r\n      // This function now accepts a new post as an argument\r\n      setPosts([...posts, newPost]); // Append new post to array\r\n  };\r\n  \r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"header\">\r\n  <h2>post- thats ours...</h2>\r\n</div>\r\n      <div className=\"body\">\r\n      <Routes>\r\n        <Route path=\"/\" element={<Main  />} />\r\n        <Route\r\n          path=\"/:userName/:userID/Posts\"\r\n          element={\r\n            <div>\r\n              <Main  />\r\n              <Posts getFetchPosts={getFetchPosts} postArr={posts}/>\r\n              <AddPost handlePostUpdate={handlePostUpdate} isLoading={isLoading} /> \r\n            </div>\r\n          }\r\n        />\r\n      </Routes>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}
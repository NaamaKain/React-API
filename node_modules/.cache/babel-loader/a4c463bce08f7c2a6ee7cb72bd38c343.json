{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1\\\\Desktop\\\\new react\\\\src\\\\components\\\\AddPost.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { useParams } from 'react-router';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Loader from './Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddPost = _ref => {\n  _s();\n\n  let {\n    handlePostUpdate,\n    postArr\n  } = _ref;\n  let params = useParams();\n  const [isLoading, setIsLoading] = useState(false); //true when the server is up\n\n  const [open, setOpen] = React.useState(false); //open the dialog form\n\n  const [title, setTitle] = useState(''); //take the new-post-title text\n\n  const [body, setBody] = useState(''); //take the new-post-body text\n\n  let [newId, setNewId] = useState(0);\n\n  const onFinish = async () => {\n    setIsLoading(true);\n    setTitle(\"\");\n    setBody(\"\");\n    let postArrLength = postArr.length();\n\n    if (postArrLength > newId) {\n      setNewId(postArrLength);\n    } else {\n      set;\n    }\n\n    try {\n      const post = {\n        title: title,\n        body: body,\n        userId: params.userID,\n        id: newId\n      };\n      const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\n        method: 'POST',\n        body: JSON.stringify(post),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error ${response.status}`);\n      }\n\n      const newPost = await response.json();\n      handlePostUpdate(newPost); // Call the function to update posts\n\n      handleClose();\n    } catch (error) {\n      console.error('ERROR:', error); // Log the error to the console\n      // Optionally, display an error message to the user here\n    }\n\n    setNewId(newId + 1);\n    setIsLoading(false);\n  };\n\n  const handleClickOpen = () => {\n    //open dialog form\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    //close the dialog form\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"addPostForm\",\n    children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: handleClickOpen,\n        children: \"Add new post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        open: open,\n        onClose: handleClose,\n        onFinish: onFinish,\n        onExited: onFinish,\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: \"Add new post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n            children: \"Please fill in the title and content of the post to be published.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 18\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            autoFocus: true,\n            margin: \"dense\",\n            id: \"name\",\n            label: \"title\",\n            type: \"text\",\n            fullWidth: true,\n            variant: \"standard\",\n            value: title,\n            onChange: e => {\n              setTitle(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            autoFocus: true,\n            margin: \"dense\",\n            id: \"body\",\n            label: \"content\",\n            type: \"text\",\n            fullWidth: true,\n            variant: \"standard\",\n            value: body,\n            onChange: e => {\n              setBody(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleClose,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: onFinish,\n            children: \"Subscribe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 14\n          }, this), isLoading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddPost, \"a3rH26dmcZChAhr+ySpRjvdXoUU=\", false, function () {\n  return [useParams];\n});\n\n_c = AddPost;\nexport default AddPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPost\");","map":{"version":3,"sources":["C:/Users/1/Desktop/new react/src/components/AddPost.jsx"],"names":["React","useState","useParams","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Loader","AddPost","handlePostUpdate","postArr","params","isLoading","setIsLoading","open","setOpen","title","setTitle","body","setBody","newId","setNewId","onFinish","postArrLength","length","set","post","userId","userID","id","response","fetch","method","JSON","stringify","headers","ok","Error","status","newPost","json","handleClose","error","console","handleClickOpen","e","target","value"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Loader from './Loader';\r\n\r\nconst AddPost = ({ handlePostUpdate ,postArr}) => {\r\n    let params=useParams();\r\n    const [isLoading, setIsLoading] = useState(false); //true when the server is up\r\n    const [open, setOpen] = React.useState(false); //open the dialog form\r\n    const [title, setTitle] = useState('') //take the new-post-title text\r\n    const [body, setBody] = useState('')  //take the new-post-body text\r\n    let [newId,setNewId]=useState(0);\r\n\r\n    const onFinish = async () => {\r\n      setIsLoading(true)\r\n      setTitle(\"\");\r\n      setBody(\"\");\r\n      let postArrLength=postArr.length();\r\nif(postArrLength>newId){\r\n  setNewId(postArrLength)\r\n}\r\nelse{\r\n  set\r\n}\r\n      try {\r\n        const post = {\r\n          title: title,\r\n          body: body,\r\n          userId: params.userID,\r\n          id:newId\r\n        };\r\n        const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\r\n          method: 'POST',\r\n          body: JSON.stringify(post),\r\n          headers: {\r\n            'Content-type': 'application/json; charset=UTF-8',\r\n          },\r\n        });\r\n  \r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error ${response.status}`);\r\n        }\r\n        const newPost = await response.json();\r\n        handlePostUpdate(newPost); // Call the function to update posts\r\n        handleClose();\r\n      } catch (error) {\r\n        console.error('ERROR:', error); // Log the error to the console\r\n        // Optionally, display an error message to the user here\r\n      }\r\n      setNewId(newId+1);\r\n      setIsLoading(false);\r\n    };\r\n    \r\n    const handleClickOpen = () => { //open dialog form\r\n      setOpen(true);\r\n    };\r\n  \r\n    const handleClose = () => {  //close the dialog form\r\n      setOpen(false);\r\n    };\r\n  \r\n    return (\r\n        <div className=\"addPostForm\">\r\n          <React.Fragment>\r\n              <Button variant=\"outlined\" onClick={handleClickOpen}>\r\n                Add new post\r\n              </Button>\r\n             <Dialog open={open} onClose={handleClose}  onFinish={onFinish} onExited={onFinish}>\r\n                <DialogTitle>Add new post</DialogTitle>\r\n                 <DialogContent>\r\n                 <DialogContentText>\r\n                 Please fill in the title and content of the post to be published.\r\n                </DialogContentText>\r\n                <TextField\r\n                  autoFocus\r\n                  margin=\"dense\"\r\n                  id=\"name\"\r\n                  label=\"title\"\r\n                  type=\"text\"\r\n                  fullWidth\r\n                  variant=\"standard\"\r\n                  value={title}\r\n                   onChange={e => {\r\n                    setTitle(e.target.value)\r\n                  }}\r\n                 />\r\n                <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                id=\"body\"\r\n                label=\"content\"\r\n                type=\"text\"\r\n                fullWidth\r\n                variant=\"standard\"\r\n                value={body}\r\n                onChange={e => {\r\n                setBody(e.target.value)\r\n                }}\r\n               />\r\n          </DialogContent>\r\n           <DialogActions>\r\n             <Button onClick={handleClose}>Cancel</Button>\r\n             <Button onClick={onFinish}>Subscribe</Button>\r\n             {isLoading&&<Loader/>}\r\n           </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default AddPost"]},"metadata":{},"sourceType":"module"}
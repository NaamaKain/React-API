{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"className\", \"lastTransitionedPropertyOnEnter\", \"lastTransitionedPropertyOnExit\", \"enterClassName\", \"exitClassName\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useTransitionStateManager } from '../useTransition';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * A utility component that hooks up to the Base UI transitions API and\n * applies a CSS transition to its children when necessary.\n *\n * Demos:\n *\n * - [Transitions](https://mui.com/base-ui/react-transitions/)\n *\n * API:\n *\n * - [CssTransition API](https://mui.com/base-ui/react-transitions/components-api/#css-transition)\n */\n\nfunction CssTransition(props) {\n  const {\n    children,\n    className,\n    lastTransitionedPropertyOnEnter,\n    lastTransitionedPropertyOnExit,\n    enterClassName,\n    exitClassName\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    requestedEnter,\n    onEntering,\n    onEntered,\n    onExiting,\n    onExited\n  } = useTransitionStateManager();\n  const [isEntering, setIsEntering] = React.useState(!requestedEnter); // The `isEntering` state (which is used to determine the right CSS class to apply)\n  // is updated slightly (one animation frame) after the `requestedEnter` state is updated.\n  // Thanks to this, elements that are mounted will have their enter transition applied\n  // (if the `enterClassName` was applied when the element was mounted, the transition would not be fired).\n\n  React.useEffect(() => {\n    if (requestedEnter) {\n      requestAnimationFrame(() => {\n        setIsEntering(true);\n      });\n    } else {\n      requestAnimationFrame(() => {\n        setIsEntering(false);\n      });\n    }\n  });\n  React.useEffect(() => {\n    if (requestedEnter) {\n      onEntering();\n    } else {\n      onExiting();\n    }\n  }, [requestedEnter, onEntering, onExiting]);\n  const handleTransitionEnd = React.useCallback(event => {\n    if (requestedEnter) {\n      if (lastTransitionedPropertyOnEnter == null || event.propertyName === lastTransitionedPropertyOnEnter) {\n        onEntered();\n      }\n    } else if (lastTransitionedPropertyOnExit == null || event.propertyName === lastTransitionedPropertyOnExit) {\n      onExited();\n    }\n  }, [onExited, onEntered, requestedEnter, lastTransitionedPropertyOnEnter, lastTransitionedPropertyOnExit]);\n  return /*#__PURE__*/_jsx(\"div\", _extends({\n    onTransitionEnd: handleTransitionEnd,\n    className: clsx(className, isEntering ? enterClassName : exitClassName)\n  }, other, {\n    children: children\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? CssTransition.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  enterClassName: PropTypes.string,\n  exitClassName: PropTypes.string,\n  lastTransitionedPropertyOnEnter: PropTypes.string,\n  lastTransitionedPropertyOnExit: PropTypes.string\n} : void 0;\nexport { CssTransition };","map":{"version":3,"sources":["C:/Users/1/Desktop/ShefingReactExe/node_modules/@mui/base/Transitions/CssTransition.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","useTransitionStateManager","jsx","_jsx","CssTransition","props","children","className","lastTransitionedPropertyOnEnter","lastTransitionedPropertyOnExit","enterClassName","exitClassName","other","requestedEnter","onEntering","onEntered","onExiting","onExited","isEntering","setIsEntering","useState","useEffect","requestAnimationFrame","handleTransitionEnd","useCallback","event","propertyName","onTransitionEnd","process","env","NODE_ENV","propTypes","node","string"],"mappings":"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","sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"className\", \"lastTransitionedPropertyOnEnter\", \"lastTransitionedPropertyOnExit\", \"enterClassName\", \"exitClassName\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useTransitionStateManager } from '../useTransition';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * A utility component that hooks up to the Base UI transitions API and\n * applies a CSS transition to its children when necessary.\n *\n * Demos:\n *\n * - [Transitions](https://mui.com/base-ui/react-transitions/)\n *\n * API:\n *\n * - [CssTransition API](https://mui.com/base-ui/react-transitions/components-api/#css-transition)\n */\nfunction CssTransition(props) {\n  const {\n      children,\n      className,\n      lastTransitionedPropertyOnEnter,\n      lastTransitionedPropertyOnExit,\n      enterClassName,\n      exitClassName\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    requestedEnter,\n    onEntering,\n    onEntered,\n    onExiting,\n    onExited\n  } = useTransitionStateManager();\n  const [isEntering, setIsEntering] = React.useState(!requestedEnter);\n\n  // The `isEntering` state (which is used to determine the right CSS class to apply)\n  // is updated slightly (one animation frame) after the `requestedEnter` state is updated.\n  // Thanks to this, elements that are mounted will have their enter transition applied\n  // (if the `enterClassName` was applied when the element was mounted, the transition would not be fired).\n  React.useEffect(() => {\n    if (requestedEnter) {\n      requestAnimationFrame(() => {\n        setIsEntering(true);\n      });\n    } else {\n      requestAnimationFrame(() => {\n        setIsEntering(false);\n      });\n    }\n  });\n  React.useEffect(() => {\n    if (requestedEnter) {\n      onEntering();\n    } else {\n      onExiting();\n    }\n  }, [requestedEnter, onEntering, onExiting]);\n  const handleTransitionEnd = React.useCallback(event => {\n    if (requestedEnter) {\n      if (lastTransitionedPropertyOnEnter == null || event.propertyName === lastTransitionedPropertyOnEnter) {\n        onEntered();\n      }\n    } else if (lastTransitionedPropertyOnExit == null || event.propertyName === lastTransitionedPropertyOnExit) {\n      onExited();\n    }\n  }, [onExited, onEntered, requestedEnter, lastTransitionedPropertyOnEnter, lastTransitionedPropertyOnExit]);\n  return /*#__PURE__*/_jsx(\"div\", _extends({\n    onTransitionEnd: handleTransitionEnd,\n    className: clsx(className, isEntering ? enterClassName : exitClassName)\n  }, other, {\n    children: children\n  }));\n}\nprocess.env.NODE_ENV !== \"production\" ? CssTransition.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  enterClassName: PropTypes.string,\n  exitClassName: PropTypes.string,\n  lastTransitionedPropertyOnEnter: PropTypes.string,\n  lastTransitionedPropertyOnExit: PropTypes.string\n} : void 0;\nexport { CssTransition };"]},"metadata":{},"sourceType":"module"}
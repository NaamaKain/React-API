{"ast":null,"code":"import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\n\nfunction shouldBlockAnimation(_ref, key) {\n  let {\n    protectedKeys,\n    needsAnimating\n  } = _ref;\n  const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n  needsAnimating[key] = false;\n  return shouldBlock;\n}\n\nfunction hasKeyframesChanged(value, target) {\n  const current = value.get();\n\n  if (Array.isArray(target)) {\n    for (let i = 0; i < target.length; i++) {\n      if (target[i] !== current) return true;\n    }\n  } else {\n    return current !== target;\n  }\n}\n\nfunction animateTarget(visualElement, definition) {\n  let {\n    delay = 0,\n    transitionOverride,\n    type\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let {\n    transition = visualElement.getDefaultTransition(),\n    transitionEnd,\n    ...target\n  } = visualElement.makeTargetAnimatable(definition);\n  const willChange = visualElement.getValue(\"willChange\");\n  if (transitionOverride) transition = transitionOverride;\n  const animations = [];\n  const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];\n\n  for (const key in target) {\n    const value = visualElement.getValue(key);\n    const valueTarget = target[key];\n\n    if (!value || valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n      continue;\n    }\n\n    const valueTransition = {\n      delay,\n      elapsed: 0,\n      ...getValueTransition(transition || {}, key)\n    };\n    /**\n     * If this is the first time a value is being animated, check\n     * to see if we're handling off from an existing animation.\n     */\n\n    if (window.HandoffAppearAnimations) {\n      const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n\n      if (appearId) {\n        const elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n\n        if (elapsed !== null) {\n          valueTransition.elapsed = elapsed;\n          valueTransition.isHandoff = true;\n        }\n      }\n    }\n\n    let canSkip = !valueTransition.isHandoff && !hasKeyframesChanged(value, valueTarget);\n\n    if (valueTransition.type === \"spring\" && (value.getVelocity() || valueTransition.velocity)) {\n      canSkip = false;\n    }\n    /**\n     * Temporarily disable skipping animations if there's an animation in\n     * progress. Better would be to track the current target of a value\n     * and compare that against valueTarget.\n     */\n\n\n    if (value.animation) {\n      canSkip = false;\n    }\n\n    if (canSkip) continue;\n    value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? {\n      type: false\n    } : valueTransition));\n    const animation = value.animation;\n\n    if (isWillChangeMotionValue(willChange)) {\n      willChange.add(key);\n      animation.then(() => willChange.remove(key));\n    }\n\n    animations.push(animation);\n  }\n\n  if (transitionEnd) {\n    Promise.all(animations).then(() => {\n      transitionEnd && setTarget(visualElement, transitionEnd);\n    });\n  }\n\n  return animations;\n}\n\nexport { animateTarget };","map":{"version":3,"sources":["C:/Users/1/Desktop/ShefingReactExe/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs"],"names":["transformProps","optimizedAppearDataAttribute","animateMotionValue","isWillChangeMotionValue","setTarget","getValueTransition","frame","shouldBlockAnimation","key","protectedKeys","needsAnimating","shouldBlock","hasOwnProperty","hasKeyframesChanged","value","target","current","get","Array","isArray","i","length","animateTarget","visualElement","definition","delay","transitionOverride","type","transition","getDefaultTransition","transitionEnd","makeTargetAnimatable","willChange","getValue","animations","animationTypeState","animationState","getState","valueTarget","undefined","valueTransition","elapsed","window","HandoffAppearAnimations","appearId","getProps","isHandoff","canSkip","getVelocity","velocity","animation","start","shouldReduceMotion","has","add","then","remove","push","Promise","all"],"mappings":"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","sourcesContent":["import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction hasKeyframesChanged(value, target) {\n    const current = value.get();\n    if (Array.isArray(target)) {\n        for (let i = 0; i < target.length; i++) {\n            if (target[i] !== current)\n                return true;\n        }\n    }\n    else {\n        return current !== target;\n    }\n}\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            elapsed: 0,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        if (window.HandoffAppearAnimations) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                const elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n                if (elapsed !== null) {\n                    valueTransition.elapsed = elapsed;\n                    valueTransition.isHandoff = true;\n                }\n            }\n        }\n        let canSkip = !valueTransition.isHandoff &&\n            !hasKeyframesChanged(value, valueTarget);\n        if (valueTransition.type === \"spring\" &&\n            (value.getVelocity() || valueTransition.velocity)) {\n            canSkip = false;\n        }\n        /**\n         * Temporarily disable skipping animations if there's an animation in\n         * progress. Better would be to track the current target of a value\n         * and compare that against valueTarget.\n         */\n        if (value.animation) {\n            canSkip = false;\n        }\n        if (canSkip)\n            continue;\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition));\n        const animation = value.animation;\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            transitionEnd && setTarget(visualElement, transitionEnd);\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n"]},"metadata":{},"sourceType":"module"}
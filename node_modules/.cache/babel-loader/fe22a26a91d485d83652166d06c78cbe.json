{"ast":null,"code":"import { appearStoreId } from './store-id.mjs';\nimport { animateStyle } from '../animators/waapi/index.mjs';\nimport { optimizedAppearDataId } from './data-id.mjs';\nimport { handoffOptimizedAppearAnimation } from './handoff.mjs';\nimport { appearAnimationStore } from './store.mjs';\nimport { noop } from '../../utils/noop.mjs';\n/**\n * A single time to use across all animations to manually set startTime\n * and ensure they're all in sync.\n */\n\nlet startFrameTime;\n/**\n * A dummy animation to detect when Chrome is ready to start\n * painting the page and hold off from triggering the real animation\n * until then. We only need one animation to detect paint ready.\n *\n * https://bugs.chromium.org/p/chromium/issues/detail?id=1406850\n */\n\nlet readyAnimation;\n\nfunction startOptimizedAppearAnimation(element, name, keyframes, options, onReady) {\n  // Prevent optimised appear animations if Motion has already started animating.\n  if (window.HandoffComplete) {\n    window.HandoffAppearAnimations = undefined;\n    return;\n  }\n\n  const id = element.dataset[optimizedAppearDataId];\n  if (!id) return;\n  window.HandoffAppearAnimations = handoffOptimizedAppearAnimation;\n  const storeId = appearStoreId(id, name);\n\n  if (!readyAnimation) {\n    readyAnimation = animateStyle(element, name, [keyframes[0], keyframes[0]],\n    /**\n     * 10 secs is basically just a super-safe duration to give Chrome\n     * long enough to get the animation ready.\n     */\n    {\n      duration: 10000,\n      ease: \"linear\"\n    });\n    appearAnimationStore.set(storeId, {\n      animation: readyAnimation,\n      startTime: null\n    });\n  }\n\n  const startAnimation = () => {\n    readyAnimation.cancel();\n    const appearAnimation = animateStyle(element, name, keyframes, options);\n    /**\n     * Record the time of the first started animation. We call performance.now() once\n     * here and once in handoff to ensure we're getting\n     * close to a frame-locked time. This keeps all animations in sync.\n     */\n\n    if (startFrameTime === undefined) {\n      startFrameTime = performance.now();\n    }\n\n    appearAnimation.startTime = startFrameTime;\n    appearAnimationStore.set(storeId, {\n      animation: appearAnimation,\n      startTime: startFrameTime\n    });\n    if (onReady) onReady(appearAnimation);\n  };\n\n  if (readyAnimation.ready) {\n    readyAnimation.ready.then(startAnimation).catch(noop);\n  } else {\n    startAnimation();\n  }\n}\n\nexport { startOptimizedAppearAnimation };","map":{"version":3,"sources":["C:/Users/1/Desktop/ShefingReactExe/node_modules/framer-motion/dist/es/animation/optimized-appear/start.mjs"],"names":["appearStoreId","animateStyle","optimizedAppearDataId","handoffOptimizedAppearAnimation","appearAnimationStore","noop","startFrameTime","readyAnimation","startOptimizedAppearAnimation","element","name","keyframes","options","onReady","window","HandoffComplete","HandoffAppearAnimations","undefined","id","dataset","storeId","duration","ease","set","animation","startTime","startAnimation","cancel","appearAnimation","performance","now","ready","then","catch"],"mappings":"AAAA,SAASA,aAAT,QAA8B,gBAA9B;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,qBAAT,QAAsC,eAAtC;AACA,SAASC,+BAAT,QAAgD,eAAhD;AACA,SAASC,oBAAT,QAAqC,aAArC;AACA,SAASC,IAAT,QAAqB,sBAArB;AAEA;AACA;AACA;AACA;;AACA,IAAIC,cAAJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,cAAJ;;AACA,SAASC,6BAAT,CAAuCC,OAAvC,EAAgDC,IAAhD,EAAsDC,SAAtD,EAAiEC,OAAjE,EAA0EC,OAA1E,EAAmF;AAC/E;AACA,MAAIC,MAAM,CAACC,eAAX,EAA4B;AACxBD,IAAAA,MAAM,CAACE,uBAAP,GAAiCC,SAAjC;AACA;AACH;;AACD,QAAMC,EAAE,GAAGT,OAAO,CAACU,OAAR,CAAgBjB,qBAAhB,CAAX;AACA,MAAI,CAACgB,EAAL,EACI;AACJJ,EAAAA,MAAM,CAACE,uBAAP,GAAiCb,+BAAjC;AACA,QAAMiB,OAAO,GAAGpB,aAAa,CAACkB,EAAD,EAAKR,IAAL,CAA7B;;AACA,MAAI,CAACH,cAAL,EAAqB;AACjBA,IAAAA,cAAc,GAAGN,YAAY,CAACQ,OAAD,EAAUC,IAAV,EAAgB,CAACC,SAAS,CAAC,CAAD,CAAV,EAAeA,SAAS,CAAC,CAAD,CAAxB,CAAhB;AAC7B;AACR;AACA;AACA;AACQ;AAAEU,MAAAA,QAAQ,EAAE,KAAZ;AAAmBC,MAAAA,IAAI,EAAE;AAAzB,KAL6B,CAA7B;AAMAlB,IAAAA,oBAAoB,CAACmB,GAArB,CAAyBH,OAAzB,EAAkC;AAC9BI,MAAAA,SAAS,EAAEjB,cADmB;AAE9BkB,MAAAA,SAAS,EAAE;AAFmB,KAAlC;AAIH;;AACD,QAAMC,cAAc,GAAG,MAAM;AACzBnB,IAAAA,cAAc,CAACoB,MAAf;AACA,UAAMC,eAAe,GAAG3B,YAAY,CAACQ,OAAD,EAAUC,IAAV,EAAgBC,SAAhB,EAA2BC,OAA3B,CAApC;AACA;AACR;AACA;AACA;AACA;;AACQ,QAAIN,cAAc,KAAKW,SAAvB,EAAkC;AAC9BX,MAAAA,cAAc,GAAGuB,WAAW,CAACC,GAAZ,EAAjB;AACH;;AACDF,IAAAA,eAAe,CAACH,SAAhB,GAA4BnB,cAA5B;AACAF,IAAAA,oBAAoB,CAACmB,GAArB,CAAyBH,OAAzB,EAAkC;AAC9BI,MAAAA,SAAS,EAAEI,eADmB;AAE9BH,MAAAA,SAAS,EAAEnB;AAFmB,KAAlC;AAIA,QAAIO,OAAJ,EACIA,OAAO,CAACe,eAAD,CAAP;AACP,GAlBD;;AAmBA,MAAIrB,cAAc,CAACwB,KAAnB,EAA0B;AACtBxB,IAAAA,cAAc,CAACwB,KAAf,CAAqBC,IAArB,CAA0BN,cAA1B,EAA0CO,KAA1C,CAAgD5B,IAAhD;AACH,GAFD,MAGK;AACDqB,IAAAA,cAAc;AACjB;AACJ;;AAED,SAASlB,6BAAT","sourcesContent":["import { appearStoreId } from './store-id.mjs';\nimport { animateStyle } from '../animators/waapi/index.mjs';\nimport { optimizedAppearDataId } from './data-id.mjs';\nimport { handoffOptimizedAppearAnimation } from './handoff.mjs';\nimport { appearAnimationStore } from './store.mjs';\nimport { noop } from '../../utils/noop.mjs';\n\n/**\n * A single time to use across all animations to manually set startTime\n * and ensure they're all in sync.\n */\nlet startFrameTime;\n/**\n * A dummy animation to detect when Chrome is ready to start\n * painting the page and hold off from triggering the real animation\n * until then. We only need one animation to detect paint ready.\n *\n * https://bugs.chromium.org/p/chromium/issues/detail?id=1406850\n */\nlet readyAnimation;\nfunction startOptimizedAppearAnimation(element, name, keyframes, options, onReady) {\n    // Prevent optimised appear animations if Motion has already started animating.\n    if (window.HandoffComplete) {\n        window.HandoffAppearAnimations = undefined;\n        return;\n    }\n    const id = element.dataset[optimizedAppearDataId];\n    if (!id)\n        return;\n    window.HandoffAppearAnimations = handoffOptimizedAppearAnimation;\n    const storeId = appearStoreId(id, name);\n    if (!readyAnimation) {\n        readyAnimation = animateStyle(element, name, [keyframes[0], keyframes[0]], \n        /**\n         * 10 secs is basically just a super-safe duration to give Chrome\n         * long enough to get the animation ready.\n         */\n        { duration: 10000, ease: \"linear\" });\n        appearAnimationStore.set(storeId, {\n            animation: readyAnimation,\n            startTime: null,\n        });\n    }\n    const startAnimation = () => {\n        readyAnimation.cancel();\n        const appearAnimation = animateStyle(element, name, keyframes, options);\n        /**\n         * Record the time of the first started animation. We call performance.now() once\n         * here and once in handoff to ensure we're getting\n         * close to a frame-locked time. This keeps all animations in sync.\n         */\n        if (startFrameTime === undefined) {\n            startFrameTime = performance.now();\n        }\n        appearAnimation.startTime = startFrameTime;\n        appearAnimationStore.set(storeId, {\n            animation: appearAnimation,\n            startTime: startFrameTime,\n        });\n        if (onReady)\n            onReady(appearAnimation);\n    };\n    if (readyAnimation.ready) {\n        readyAnimation.ready.then(startAnimation).catch(noop);\n    }\n    else {\n        startAnimation();\n    }\n}\n\nexport { startOptimizedAppearAnimation };\n"]},"metadata":{},"sourceType":"module"}
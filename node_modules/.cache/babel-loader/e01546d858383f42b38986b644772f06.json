{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u05DE\\u05D3\\u05E2\\u05D9 \\u05D4\\u05DE\\u05D7\\u05E9\\u05D1\\\\fullstuck\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\react\\\\part-two\\\\src\\\\components\\\\Photo.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Photo() {\n  _s();\n\n  let navigate = useNavigate();\n  let param = useParams();\n  console.log(param);\n  let [arr, setPhoto] = useState([]);\n  let [photoId, setPhotoId] = useState(param.albumId * 50 - 50 + 1);\n  let tmpPhotoArr = [];\n  useEffect(() => {\n    if (localStorage.getItem(\"userName\") == 'undefined' || localStorage.getItem(\"userName\") == null) {\n      console.log('not found');\n      navigate(\"/\");\n    } else {\n      let url = `https://jsonplaceholder.typicode.com/photos?_page=${photoId}`;\n      fetch(url).then(response => response.json()).then(response => {\n        tmpPhotoArr = arr;\n        tmpPhotoArr.push(response);\n        setPhoto(tmpPhotoArr);\n        console.log(arr);\n      });\n    }\n  }, [photoId]);\n\n  function changeId() {\n    console.log(photoId, param.albumId);\n\n    if (photoId < param.albumId * 50) {\n      setPhotoId(photoId + 10);\n    } else {\n      alert(\"you finish load all the album's pictures\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" album \", param.albumId, \"!!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 1\n    }, this), arr.map((photo, i) => {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: photo.map(item => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"singlePicture\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: item.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: item.thumbnailUrl,\n                height: \"150px\",\n                width: \"150px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 9\n              }, this)]\n            }, item.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 9\n          }, this);\n        })\n      }, photo[i].id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 5\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: changeId,\n      id: \"loadedButton\",\n      children: \"load pictures\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 1\n  }, this);\n}\n\n_s(Photo, \"zog/PuMJNw+247XpfkKwpLChtss=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = Photo;\nexport default Photo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Photo\");","map":{"version":3,"sources":["D:/מדעי המחשב/fullstuck/פרויקטים/react/part-two/src/components/Photo.jsx"],"names":["React","useEffect","useState","useParams","useNavigate","Photo","navigate","param","console","log","arr","setPhoto","photoId","setPhotoId","albumId","tmpPhotoArr","localStorage","getItem","url","fetch","then","response","json","push","changeId","alert","map","photo","i","item","title","thumbnailUrl","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nfunction Photo(){\r\n    let navigate=useNavigate();\r\n    let param=useParams();\r\n    console.log(param);\r\n    let [arr, setPhoto] = useState([]);\r\nlet [photoId,setPhotoId]=useState(((param.albumId*50)-50)+1);\r\nlet tmpPhotoArr=[];\r\n\r\nuseEffect(\r\n    () => {\r\n      if ((localStorage.getItem(\"userName\")) == 'undefined' || (localStorage.getItem(\"userName\")) == null) {\r\n        console.log('not found');\r\n        navigate(\"/\");\r\n      }\r\n      else {\r\n        let url = `https://jsonplaceholder.typicode.com/photos?_page=${photoId}`;\r\n        fetch(url)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                tmpPhotoArr=arr;\r\n                tmpPhotoArr.push(response);\r\n                setPhoto(tmpPhotoArr);\r\n                console.log(arr);\r\n            })\r\n      }\r\n    }, [photoId]\r\n  );\r\n        function changeId(){\r\n            console.log(photoId ,param.albumId)\r\n            if(photoId<(param.albumId*50)){\r\n                setPhotoId(photoId+10);\r\n            }\r\n            else{\r\n                alert(\"you finish load all the album's pictures\");\r\n            }\r\n        }\r\nreturn(\r\n<div>\r\n<h1> album {param.albumId}!!</h1>\r\n{\r\narr.map((photo,i)=>{\r\n    return(\r\n    <span key={photo[i].id}>  \r\n        {photo.map((item)=>{\r\n    return(\r\n        <div className=\"singlePicture\">\r\n        <span key={item.id}>\r\n        <h3>{item.title}</h3>\r\n        <img src={item.thumbnailUrl} height=\"150px\" width=\"150px\"></img>\r\n        </span>\r\n        </div>\r\n    )\r\n   \r\n})}\r\n      </span>)\r\n})\r\n}\r\n<button onClick={changeId} id=\"loadedButton\" >load pictures</button>\r\n</div>\r\n);\r\n}\r\nexport default Photo;\r\n\r\n"]},"metadata":{},"sourceType":"module"}
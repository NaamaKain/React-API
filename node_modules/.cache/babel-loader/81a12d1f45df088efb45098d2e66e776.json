{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u05DE\\u05D3\\u05E2\\u05D9 \\u05D4\\u05DE\\u05D7\\u05E9\\u05D1\\\\fullstuck\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\react\\\\part-two\\\\src\\\\components\\\\Post.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Post(props) {\n  _s();\n\n  let [comments, setComments] = useState([]);\n  let [arr, setArr] = useState([]);\n  let [text, setText] = useState(\"show comments\");\n\n  function getData() {\n    let url = `https://jsonplaceholder.typicode.com/comments?postId=${props.post.id}`;\n    fetch(url).then(response => response.json()).then(response => {\n      setComments(response);\n    });\n  }\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  function show() {\n    if (text == \"show comments\") {\n      setArr(comments);\n      setText(\"hide comments\");\n    } else {\n      setArr([]);\n      setText(\"hide comments\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" \", props.post.body]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: show,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 1\n    }, this), arr.map(comment => /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: comment.body\n    }, comment.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Post, \"SdeW+zh9xQ6eyj9n0TDn958TQ3U=\");\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["D:/מדעי המחשב/fullstuck/פרויקטים/react/part-two/src/components/Post.jsx"],"names":["React","useEffect","useState","Post","props","comments","setComments","arr","setArr","text","setText","getData","url","post","id","fetch","then","response","json","show","body","map","comment"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAGA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAEjB,MAAI,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,EAAD,CAAtC;AACA,MAAI,CAACK,GAAD,EAAMC,MAAN,IAAgBN,QAAQ,CAAC,EAAD,CAA5B;AACA,MAAI,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,eAAD,CAA9B;;AACA,WAASS,OAAT,GACA;AACI,QAAIC,GAAG,GAAI,wDAAuDR,KAAK,CAACS,IAAN,CAAWC,EAAG,EAAhF;AACAC,IAAAA,KAAK,CAACH,GAAD,CAAL,CACKI,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUC,QAAQ,IAAI;AACdX,MAAAA,WAAW,CAACW,QAAD,CAAX;AACH,KAJL;AAKC;;AACLhB,EAAAA,SAAS,CAAC,MAAI;AAACU,IAAAA,OAAO;AAAG,GAAhB,EAAiB,EAAjB,CAAT;;AACA,WAASQ,IAAT,GAAe;AACX,QAAGV,IAAI,IAAE,eAAT,EAAyB;AACrBD,MAAAA,MAAM,CAACH,QAAD,CAAN;AACAK,MAAAA,OAAO,CAAC,eAAD,CAAP;AAEH,KAJD,MAKI;AACAF,MAAAA,MAAM,CAAC,EAAD,CAAN;AACAE,MAAAA,OAAO,CAAC,eAAD,CAAP;AAEH;AAEJ;;AAED,sBACI;AAAA,4BACI;AAAA,sBAAKN,KAAK,CAACS,IAAN,CAAWO,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAER;AAAQ,MAAA,OAAO,EAAED,IAAjB;AAAA,gBAAwBV;AAAxB;AAAA;AAAA;AAAA;AAAA,YAFQ,EAIJF,GAAG,CAACc,GAAJ,CAASC,OAAD,iBACR;AAAA,gBAAsBA,OAAO,CAACF;AAA9B,OAASE,OAAO,CAACR,EAAjB;AAAA;AAAA;AAAA;AAAA,YADA,CAJI;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GAvCQX,I;;KAAAA,I;AAwCT,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\n\r\nfunction Post(props) {\r\n    \r\n    let [comments, setComments] = useState([]);\r\n    let [arr, setArr] = useState([]);\r\n    let [text, setText] = useState(\"show comments\");\r\n    function getData()\r\n    {\r\n        let url = `https://jsonplaceholder.typicode.com/comments?postId=${props.post.id}`;\r\n        fetch(url)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                setComments(response);\r\n            })\r\n        }\r\n    useEffect(()=>{getData()},[])\r\n    function show(){\r\n        if(text==\"show comments\"){\r\n            setArr(comments);\r\n            setText(\"hide comments\")    \r\n\r\n        }\r\n        else{\r\n            setArr([])\r\n            setText(\"hide comments\")    \r\n\r\n        }\r\n      \r\n    }\r\n   \r\n    return (\r\n        <div>\r\n            <p> {props.post.body}</p>\r\n<button onClick={show}>{text}</button>\r\n{\r\n    arr.map((comment)=>(\r\n    <h4 key={comment.id}>{comment.body}</h4>\r\n))}\r\n    </div>\r\n    );\r\n}\r\nexport default Post;"]},"metadata":{},"sourceType":"module"}